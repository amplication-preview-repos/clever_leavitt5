/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CategoryItem as PrismaCategoryItem,
  Item as PrismaItem,
  Shop as PrismaShop,
} from "@prisma/client";

export class CategoryItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CategoryItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.categoryItem.count(args);
  }

  async categoryItems<T extends Prisma.CategoryItemFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CategoryItemFindManyArgs>
  ): Promise<PrismaCategoryItem[]> {
    return this.prisma.categoryItem.findMany<Prisma.CategoryItemFindManyArgs>(
      args
    );
  }
  async categoryItem<T extends Prisma.CategoryItemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CategoryItemFindUniqueArgs>
  ): Promise<PrismaCategoryItem | null> {
    return this.prisma.categoryItem.findUnique(args);
  }
  async createCategoryItem<T extends Prisma.CategoryItemCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CategoryItemCreateArgs>
  ): Promise<PrismaCategoryItem> {
    return this.prisma.categoryItem.create<T>(args);
  }
  async updateCategoryItem<T extends Prisma.CategoryItemUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CategoryItemUpdateArgs>
  ): Promise<PrismaCategoryItem> {
    return this.prisma.categoryItem.update<T>(args);
  }
  async deleteCategoryItem<T extends Prisma.CategoryItemDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CategoryItemDeleteArgs>
  ): Promise<PrismaCategoryItem> {
    return this.prisma.categoryItem.delete(args);
  }

  async findItems(
    parentId: string,
    args: Prisma.ItemFindManyArgs
  ): Promise<PrismaItem[]> {
    return this.prisma.categoryItem
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .items(args);
  }

  async getShop(parentId: string): Promise<PrismaShop | null> {
    return this.prisma.categoryItem
      .findUnique({
        where: { id: parentId },
      })
      .shop();
  }
}
