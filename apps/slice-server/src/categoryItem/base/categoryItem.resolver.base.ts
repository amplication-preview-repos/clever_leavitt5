/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CategoryItem } from "./CategoryItem";
import { CategoryItemCountArgs } from "./CategoryItemCountArgs";
import { CategoryItemFindManyArgs } from "./CategoryItemFindManyArgs";
import { CategoryItemFindUniqueArgs } from "./CategoryItemFindUniqueArgs";
import { CreateCategoryItemArgs } from "./CreateCategoryItemArgs";
import { UpdateCategoryItemArgs } from "./UpdateCategoryItemArgs";
import { DeleteCategoryItemArgs } from "./DeleteCategoryItemArgs";
import { ItemFindManyArgs } from "../../item/base/ItemFindManyArgs";
import { Item } from "../../item/base/Item";
import { Shop } from "../../shop/base/Shop";
import { CategoryItemService } from "../categoryItem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CategoryItem)
export class CategoryItemResolverBase {
  constructor(
    protected readonly service: CategoryItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CategoryItem",
    action: "read",
    possession: "any",
  })
  async _categoryItemsMeta(
    @graphql.Args() args: CategoryItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CategoryItem])
  @nestAccessControl.UseRoles({
    resource: "CategoryItem",
    action: "read",
    possession: "any",
  })
  async categoryItems(
    @graphql.Args() args: CategoryItemFindManyArgs
  ): Promise<CategoryItem[]> {
    return this.service.categoryItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CategoryItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CategoryItem",
    action: "read",
    possession: "own",
  })
  async categoryItem(
    @graphql.Args() args: CategoryItemFindUniqueArgs
  ): Promise<CategoryItem | null> {
    const result = await this.service.categoryItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CategoryItem)
  @nestAccessControl.UseRoles({
    resource: "CategoryItem",
    action: "create",
    possession: "any",
  })
  async createCategoryItem(
    @graphql.Args() args: CreateCategoryItemArgs
  ): Promise<CategoryItem> {
    return await this.service.createCategoryItem({
      ...args,
      data: {
        ...args.data,

        shop: args.data.shop
          ? {
              connect: args.data.shop,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CategoryItem)
  @nestAccessControl.UseRoles({
    resource: "CategoryItem",
    action: "update",
    possession: "any",
  })
  async updateCategoryItem(
    @graphql.Args() args: UpdateCategoryItemArgs
  ): Promise<CategoryItem | null> {
    try {
      return await this.service.updateCategoryItem({
        ...args,
        data: {
          ...args.data,

          shop: args.data.shop
            ? {
                connect: args.data.shop,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CategoryItem)
  @nestAccessControl.UseRoles({
    resource: "CategoryItem",
    action: "delete",
    possession: "any",
  })
  async deleteCategoryItem(
    @graphql.Args() args: DeleteCategoryItemArgs
  ): Promise<CategoryItem | null> {
    try {
      return await this.service.deleteCategoryItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Item], { name: "items" })
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "read",
    possession: "any",
  })
  async findItems(
    @graphql.Parent() parent: CategoryItem,
    @graphql.Args() args: ItemFindManyArgs
  ): Promise<Item[]> {
    const results = await this.service.findItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Shop, {
    nullable: true,
    name: "shop",
  })
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "read",
    possession: "any",
  })
  async getShop(@graphql.Parent() parent: CategoryItem): Promise<Shop | null> {
    const result = await this.service.getShop(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
