/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Shop } from "./Shop";
import { ShopCountArgs } from "./ShopCountArgs";
import { ShopFindManyArgs } from "./ShopFindManyArgs";
import { ShopFindUniqueArgs } from "./ShopFindUniqueArgs";
import { CreateShopArgs } from "./CreateShopArgs";
import { UpdateShopArgs } from "./UpdateShopArgs";
import { DeleteShopArgs } from "./DeleteShopArgs";
import { CategoryItemFindManyArgs } from "../../categoryItem/base/CategoryItemFindManyArgs";
import { CategoryItem } from "../../categoryItem/base/CategoryItem";
import { Cuisine } from "../../cuisine/base/Cuisine";
import { ShopService } from "../shop.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Shop)
export class ShopResolverBase {
  constructor(
    protected readonly service: ShopService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "read",
    possession: "any",
  })
  async _shopsMeta(
    @graphql.Args() args: ShopCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Shop])
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "read",
    possession: "any",
  })
  async shops(@graphql.Args() args: ShopFindManyArgs): Promise<Shop[]> {
    return this.service.shops(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Shop, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "read",
    possession: "own",
  })
  async shop(@graphql.Args() args: ShopFindUniqueArgs): Promise<Shop | null> {
    const result = await this.service.shop(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Shop)
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "create",
    possession: "any",
  })
  async createShop(@graphql.Args() args: CreateShopArgs): Promise<Shop> {
    return await this.service.createShop({
      ...args,
      data: {
        ...args.data,

        cuisine: args.data.cuisine
          ? {
              connect: args.data.cuisine,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Shop)
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async updateShop(@graphql.Args() args: UpdateShopArgs): Promise<Shop | null> {
    try {
      return await this.service.updateShop({
        ...args,
        data: {
          ...args.data,

          cuisine: args.data.cuisine
            ? {
                connect: args.data.cuisine,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Shop)
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "delete",
    possession: "any",
  })
  async deleteShop(@graphql.Args() args: DeleteShopArgs): Promise<Shop | null> {
    try {
      return await this.service.deleteShop(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CategoryItem], { name: "categoryItems" })
  @nestAccessControl.UseRoles({
    resource: "CategoryItem",
    action: "read",
    possession: "any",
  })
  async findCategoryItems(
    @graphql.Parent() parent: Shop,
    @graphql.Args() args: CategoryItemFindManyArgs
  ): Promise<CategoryItem[]> {
    const results = await this.service.findCategoryItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Cuisine, {
    nullable: true,
    name: "cuisine",
  })
  @nestAccessControl.UseRoles({
    resource: "Cuisine",
    action: "read",
    possession: "any",
  })
  async getCuisine(@graphql.Parent() parent: Shop): Promise<Cuisine | null> {
    const result = await this.service.getCuisine(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
