/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ShopService } from "../shop.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ShopCreateInput } from "./ShopCreateInput";
import { Shop } from "./Shop";
import { ShopFindManyArgs } from "./ShopFindManyArgs";
import { ShopWhereUniqueInput } from "./ShopWhereUniqueInput";
import { ShopUpdateInput } from "./ShopUpdateInput";
import { CategoryItemFindManyArgs } from "../../categoryItem/base/CategoryItemFindManyArgs";
import { CategoryItem } from "../../categoryItem/base/CategoryItem";
import { CategoryItemWhereUniqueInput } from "../../categoryItem/base/CategoryItemWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ShopControllerBase {
  constructor(
    protected readonly service: ShopService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Shop })
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createShop(@common.Body() data: ShopCreateInput): Promise<Shop> {
    return await this.service.createShop({
      data: {
        ...data,

        cuisine: data.cuisine
          ? {
              connect: data.cuisine,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        cuisine: {
          select: {
            id: true,
          },
        },

        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Shop] })
  @ApiNestedQuery(ShopFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async shops(@common.Req() request: Request): Promise<Shop[]> {
    const args = plainToClass(ShopFindManyArgs, request.query);
    return this.service.shops({
      ...args,
      select: {
        createdAt: true,

        cuisine: {
          select: {
            id: true,
          },
        },

        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Shop })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async shop(
    @common.Param() params: ShopWhereUniqueInput
  ): Promise<Shop | null> {
    const result = await this.service.shop({
      where: params,
      select: {
        createdAt: true,

        cuisine: {
          select: {
            id: true,
          },
        },

        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Shop })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateShop(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() data: ShopUpdateInput
  ): Promise<Shop | null> {
    try {
      return await this.service.updateShop({
        where: params,
        data: {
          ...data,

          cuisine: data.cuisine
            ? {
                connect: data.cuisine,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          cuisine: {
            select: {
              id: true,
            },
          },

          id: true,
          location: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Shop })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteShop(
    @common.Param() params: ShopWhereUniqueInput
  ): Promise<Shop | null> {
    try {
      return await this.service.deleteShop({
        where: params,
        select: {
          createdAt: true,

          cuisine: {
            select: {
              id: true,
            },
          },

          id: true,
          location: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/categoryItems")
  @ApiNestedQuery(CategoryItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CategoryItem",
    action: "read",
    possession: "any",
  })
  async findCategoryItems(
    @common.Req() request: Request,
    @common.Param() params: ShopWhereUniqueInput
  ): Promise<CategoryItem[]> {
    const query = plainToClass(CategoryItemFindManyArgs, request.query);
    const results = await this.service.findCategoryItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        name: true,

        shop: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/categoryItems")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async connectCategoryItems(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: CategoryItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      categoryItems: {
        connect: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/categoryItems")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async updateCategoryItems(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: CategoryItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      categoryItems: {
        set: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/categoryItems")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async disconnectCategoryItems(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: CategoryItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      categoryItems: {
        disconnect: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }
}
