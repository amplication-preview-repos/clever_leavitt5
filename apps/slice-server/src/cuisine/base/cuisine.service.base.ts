/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Cuisine as PrismaCuisine,
  Shop as PrismaShop,
} from "@prisma/client";

export class CuisineServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CuisineCountArgs, "select">): Promise<number> {
    return this.prisma.cuisine.count(args);
  }

  async cuisines<T extends Prisma.CuisineFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CuisineFindManyArgs>
  ): Promise<PrismaCuisine[]> {
    return this.prisma.cuisine.findMany<Prisma.CuisineFindManyArgs>(args);
  }
  async cuisine<T extends Prisma.CuisineFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CuisineFindUniqueArgs>
  ): Promise<PrismaCuisine | null> {
    return this.prisma.cuisine.findUnique(args);
  }
  async createCuisine<T extends Prisma.CuisineCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CuisineCreateArgs>
  ): Promise<PrismaCuisine> {
    return this.prisma.cuisine.create<T>(args);
  }
  async updateCuisine<T extends Prisma.CuisineUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CuisineUpdateArgs>
  ): Promise<PrismaCuisine> {
    return this.prisma.cuisine.update<T>(args);
  }
  async deleteCuisine<T extends Prisma.CuisineDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CuisineDeleteArgs>
  ): Promise<PrismaCuisine> {
    return this.prisma.cuisine.delete(args);
  }

  async findShops(
    parentId: string,
    args: Prisma.ShopFindManyArgs
  ): Promise<PrismaShop[]> {
    return this.prisma.cuisine
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .shops(args);
  }
}
