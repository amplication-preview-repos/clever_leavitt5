/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Cuisine } from "./Cuisine";
import { CuisineCountArgs } from "./CuisineCountArgs";
import { CuisineFindManyArgs } from "./CuisineFindManyArgs";
import { CuisineFindUniqueArgs } from "./CuisineFindUniqueArgs";
import { CreateCuisineArgs } from "./CreateCuisineArgs";
import { UpdateCuisineArgs } from "./UpdateCuisineArgs";
import { DeleteCuisineArgs } from "./DeleteCuisineArgs";
import { ShopFindManyArgs } from "../../shop/base/ShopFindManyArgs";
import { Shop } from "../../shop/base/Shop";
import { CuisineService } from "../cuisine.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Cuisine)
export class CuisineResolverBase {
  constructor(
    protected readonly service: CuisineService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Cuisine",
    action: "read",
    possession: "any",
  })
  async _cuisinesMeta(
    @graphql.Args() args: CuisineCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Cuisine])
  @nestAccessControl.UseRoles({
    resource: "Cuisine",
    action: "read",
    possession: "any",
  })
  async cuisines(
    @graphql.Args() args: CuisineFindManyArgs
  ): Promise<Cuisine[]> {
    return this.service.cuisines(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Cuisine, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Cuisine",
    action: "read",
    possession: "own",
  })
  async cuisine(
    @graphql.Args() args: CuisineFindUniqueArgs
  ): Promise<Cuisine | null> {
    const result = await this.service.cuisine(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Cuisine)
  @nestAccessControl.UseRoles({
    resource: "Cuisine",
    action: "create",
    possession: "any",
  })
  async createCuisine(
    @graphql.Args() args: CreateCuisineArgs
  ): Promise<Cuisine> {
    return await this.service.createCuisine({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Cuisine)
  @nestAccessControl.UseRoles({
    resource: "Cuisine",
    action: "update",
    possession: "any",
  })
  async updateCuisine(
    @graphql.Args() args: UpdateCuisineArgs
  ): Promise<Cuisine | null> {
    try {
      return await this.service.updateCuisine({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Cuisine)
  @nestAccessControl.UseRoles({
    resource: "Cuisine",
    action: "delete",
    possession: "any",
  })
  async deleteCuisine(
    @graphql.Args() args: DeleteCuisineArgs
  ): Promise<Cuisine | null> {
    try {
      return await this.service.deleteCuisine(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Shop], { name: "shops" })
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "read",
    possession: "any",
  })
  async findShops(
    @graphql.Parent() parent: Cuisine,
    @graphql.Args() args: ShopFindManyArgs
  ): Promise<Shop[]> {
    const results = await this.service.findShops(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
