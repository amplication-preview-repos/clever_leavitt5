/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CuisineService } from "../cuisine.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CuisineCreateInput } from "./CuisineCreateInput";
import { Cuisine } from "./Cuisine";
import { CuisineFindManyArgs } from "./CuisineFindManyArgs";
import { CuisineWhereUniqueInput } from "./CuisineWhereUniqueInput";
import { CuisineUpdateInput } from "./CuisineUpdateInput";
import { ShopFindManyArgs } from "../../shop/base/ShopFindManyArgs";
import { Shop } from "../../shop/base/Shop";
import { ShopWhereUniqueInput } from "../../shop/base/ShopWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CuisineControllerBase {
  constructor(
    protected readonly service: CuisineService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Cuisine })
  @nestAccessControl.UseRoles({
    resource: "Cuisine",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCuisine(
    @common.Body() data: CuisineCreateInput
  ): Promise<Cuisine> {
    return await this.service.createCuisine({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Cuisine] })
  @ApiNestedQuery(CuisineFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Cuisine",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async cuisines(@common.Req() request: Request): Promise<Cuisine[]> {
    const args = plainToClass(CuisineFindManyArgs, request.query);
    return this.service.cuisines({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Cuisine })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Cuisine",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async cuisine(
    @common.Param() params: CuisineWhereUniqueInput
  ): Promise<Cuisine | null> {
    const result = await this.service.cuisine({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Cuisine })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Cuisine",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCuisine(
    @common.Param() params: CuisineWhereUniqueInput,
    @common.Body() data: CuisineUpdateInput
  ): Promise<Cuisine | null> {
    try {
      return await this.service.updateCuisine({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Cuisine })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Cuisine",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCuisine(
    @common.Param() params: CuisineWhereUniqueInput
  ): Promise<Cuisine | null> {
    try {
      return await this.service.deleteCuisine({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/shops")
  @ApiNestedQuery(ShopFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "read",
    possession: "any",
  })
  async findShops(
    @common.Req() request: Request,
    @common.Param() params: CuisineWhereUniqueInput
  ): Promise<Shop[]> {
    const query = plainToClass(ShopFindManyArgs, request.query);
    const results = await this.service.findShops(params.id, {
      ...query,
      select: {
        createdAt: true,

        cuisine: {
          select: {
            id: true,
          },
        },

        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/shops")
  @nestAccessControl.UseRoles({
    resource: "Cuisine",
    action: "update",
    possession: "any",
  })
  async connectShops(
    @common.Param() params: CuisineWhereUniqueInput,
    @common.Body() body: ShopWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shops: {
        connect: body,
      },
    };
    await this.service.updateCuisine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/shops")
  @nestAccessControl.UseRoles({
    resource: "Cuisine",
    action: "update",
    possession: "any",
  })
  async updateShops(
    @common.Param() params: CuisineWhereUniqueInput,
    @common.Body() body: ShopWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shops: {
        set: body,
      },
    };
    await this.service.updateCuisine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/shops")
  @nestAccessControl.UseRoles({
    resource: "Cuisine",
    action: "update",
    possession: "any",
  })
  async disconnectShops(
    @common.Param() params: CuisineWhereUniqueInput,
    @common.Body() body: ShopWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shops: {
        disconnect: body,
      },
    };
    await this.service.updateCuisine({
      where: params,
      data,
      select: { id: true },
    });
  }
}
